import"./style.css";import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import*as dat from"lil-gui";const gui=new dat.GUI,canvas=document.querySelector("canvas.webgl"),fog=new THREE.Fog("#262837",1,15),scene=new THREE.Scene;scene.fog=fog;const textureLoader=new THREE.TextureLoader,doorColorTexture=textureLoader.load("/textures/door/color.jpg"),doorAlphaTexture=textureLoader.load("/textures/door/alpha.jpg"),doorAmbientOcclusionTexture=textureLoader.load("/textures/door/ambientOcclusion.jpg"),doorHeightTexture=textureLoader.load("/textures/door/height.jpg"),doorNormalTexture=textureLoader.load("/textures/door/normal.jpg"),doorMetalnessTexture=textureLoader.load("/textures/door/metalness.jpg"),doorRoughnessTexture=textureLoader.load("/textures/door/roughness.jpg"),bricksColorTexture=textureLoader.load("/textures/bricks/color.jpg"),bricksAmbientOcclusionTexture=textureLoader.load("/textures/bricks/ambientOcclusion.jpg"),bricksNormalTexture=textureLoader.load("/textures/bricks/normal.jpg"),bricksRoughnessTexture=textureLoader.load("/textures/bricks/roughness.jpg"),grassColorTexture=textureLoader.load("/textures/grass/color.jpg"),grassAmbientOcclusionTexture=textureLoader.load("/textures/grass/ambientOcclusion.jpg"),grassNormalTexture=textureLoader.load("/textures/grass/normal.jpg"),grassRoughnessTexture=textureLoader.load("/textures/grass/roughness.jpg");grassColorTexture.repeat.set(8,8),grassAmbientOcclusionTexture.repeat.set(8,8),grassNormalTexture.repeat.set(8,8),grassRoughnessTexture.repeat.set(8,8),grassColorTexture.wrapS=THREE.RepeatWrapping,grassAmbientOcclusionTexture.wrapS=THREE.RepeatWrapping,grassNormalTexture.wrapS=THREE.RepeatWrapping,grassRoughnessTexture.wrapS=THREE.RepeatWrapping,grassColorTexture.wrapT=THREE.RepeatWrapping,grassAmbientOcclusionTexture.wrapT=THREE.RepeatWrapping,grassNormalTexture.wrapT=THREE.RepeatWrapping,grassRoughnessTexture.wrapT=THREE.RepeatWrapping;const house=new THREE.Group;scene.add(house);const walls=new THREE.Mesh(new THREE.BoxBufferGeometry(4,2.5,4),new THREE.MeshStandardMaterial({map:bricksColorTexture,aoMap:bricksAmbientOcclusionTexture,normalMap:bricksNormalTexture,roughnessMap:bricksRoughnessTexture}));walls.geometry.setAttribute("uv2",new THREE.Float32BufferAttribute(walls.geometry.attributes.uv.array,2)),walls.position.y=1.25,house.add(walls);const roof=new THREE.Mesh(new THREE.ConeGeometry(3.5,1,4),new THREE.MeshStandardMaterial({color:"#b35f45"}));roof.position.y=3,roof.rotation.y=.25*Math.PI,house.add(roof);const door=new THREE.Mesh(new THREE.PlaneBufferGeometry(2.2,2.2,100,100),new THREE.MeshStandardMaterial({map:doorColorTexture,transparent:!0,alphaMap:doorAlphaTexture,aoMap:doorAmbientOcclusionTexture,displacementMap:doorHeightTexture,displacementScale:.1,normalMap:doorNormalTexture,metalnessMap:doorMetalnessTexture,roughnessMap:doorRoughnessTexture}));door.geometry.setAttribute("uv2",new THREE.Float32BufferAttribute(door.geometry.attributes.uv.array,2)),door.position.y=1,door.position.z=2.01,house.add(door);const ghost1=new THREE.PointLight("#ff00ff",2,3);scene.add(ghost1);const ghost2=new THREE.PointLight("#00ffff",2,3);scene.add(ghost2);const ghost3=new THREE.PointLight("#ffff00",2,3);scene.add(ghost3);const bushGeometry=new THREE.SphereGeometry(1,16,16),bushMaterial=new THREE.MeshStandardMaterial({color:"#89c854"}),bush1=new THREE.Mesh(bushGeometry,bushMaterial);bush1.scale.set(.5,.5,.5),bush1.position.set(.8,.2,2.2);const bush2=new THREE.Mesh(bushGeometry,bushMaterial);bush2.scale.set(.25,.25,.25),bush2.position.set(1.4,.1,2.1);const bush3=new THREE.Mesh(bushGeometry,bushMaterial);bush3.scale.set(.4,.4,.4),bush3.position.set(-.8,.1,2.2);const bush4=new THREE.Mesh(bushGeometry,bushMaterial);bush4.scale.set(.15,.15,.15),bush4.position.set(-1,.05,2.6),house.add(bush1,bush2,bush3,bush4);const graves=new THREE.Group;scene.add(graves);const graveGeometry=new THREE.BoxGeometry(.6,.8,.2),graveMaterial=new THREE.MeshStandardMaterial({color:"#b2b6b1"});for(let e=0;e<50;e++){const e=Math.random()*Math.PI*2,t=3+6*Math.random(),o=Math.sin(e)*t,s=Math.cos(e)*t,r=new THREE.Mesh(graveGeometry,graveMaterial);r.position.set(o,.4,s),r.rotation.y=Math.random()-1,r.rotation.z=Math.random()-1,r.castShadow=!0,graves.add(r)}const floor=new THREE.Mesh(new THREE.PlaneGeometry(20,20),new THREE.MeshStandardMaterial({map:grassColorTexture,aoMap:grassAmbientOcclusionTexture,normalMap:grassNormalTexture,roughnessMap:grassRoughnessTexture}));floor.geometry.setAttribute("uv2",new THREE.Float32BufferAttribute(floor.geometry.attributes.uv.array,2)),floor.rotation.x=.5*-Math.PI,floor.position.y=0,scene.add(floor),floor.receiveShadow=!0;const ambientLight=new THREE.AmbientLight("#b9d5ff",.12);gui.add(ambientLight,"intensity").min(0).max(1).step(.001),scene.add(ambientLight);const moonLight=new THREE.DirectionalLight("#b9d5ff",.12);moonLight.position.set(4,5,-2),gui.add(moonLight,"intensity").min(0).max(1).step(.001),gui.add(moonLight.position,"x").min(-5).max(5).step(.001),gui.add(moonLight.position,"y").min(-5).max(5).step(.001),gui.add(moonLight.position,"z").min(-5).max(5).step(.001),scene.add(moonLight);const doorLight=new THREE.PointLight("#ff7d46",1,7);doorLight.position.set(0,2.2,2.7),scene.add(doorLight);const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,100);camera.position.x=4,camera.position.y=2,camera.position.z=5,scene.add(camera);const controls=new OrbitControls(camera,canvas);controls.enableDamping=!0;const renderer=new THREE.WebGLRenderer({canvas});renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),renderer.setClearColor("#262837"),renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,moonLight.castShadow=!0,doorLight.castShadow=!0,ghost1.castShadow=!0,ghost2.castShadow=!0,ghost3.castShadow=!0,walls.castShadow=!0,bush1.castShadow=!0,bush2.castShadow=!0,bush3.castShadow=!0,bush4.castShadow=!0,moonLight.shadow.mapSize.width=256,moonLight.shadow.mapSize.height=256,moonLight.shadow.camera.far=15,doorLight.shadow.mapSize.width=256,doorLight.shadow.mapSize.height=256,doorLight.shadow.camera.far=7,ghost1.shadow.mapSize.width=256,ghost1.shadow.mapSize.height=256,ghost1.shadow.camera.far=7,ghost2.shadow.mapSize.width=256,ghost2.shadow.mapSize.height=256,ghost2.shadow.camera.far=7,ghost3.shadow.mapSize.width=256,ghost3.shadow.mapSize.height=256,ghost3.shadow.camera.far=7;const clock=new THREE.Clock,tick=()=>{const e=clock.getElapsedTime(),t=.5*e;ghost1.position.x=4*Math.cos(t),ghost1.position.z=4*Math.sin(t),ghost1.position.y=Math.sin(3*e);const o=.32*-e;ghost2.position.x=5*Math.cos(o),ghost2.position.z=5*Math.sin(o),ghost2.position.y=Math.sin(4*e)+Math.sin(2.5*e);const s=.18*-e;ghost3.position.x=Math.cos(s)*(7+Math.sin(.32*e)),ghost3.position.z=Math.sin(s)*(7+Math.sin(.5*e)),ghost3.position.y=Math.sin(4*e)+Math.sin(2.5*e),controls.update(),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();